
#No Noise Ecosystem

#ACCOUNT FOR SHORT TEMPER FOLLOWER IN THESE LEADERs

def AlexisTuchindaDetectiveLeader(mymoves, othermoves, currentRound): #currentRound starts counting at 0
  id = [False, True, False, True]

  #how to exploit to farm more - sneaky sneaky

  if True not in othermoves:
    if currentRound < len(id):
      return id[currentRound]
    return True #instigating - to exploit followers & advantage of coops

  if othermoves.count(True)>1 or (currentRound >= len(id) and othermoves[:len(id)]!=id):

    #Detective but instead of CopyCat run a Pavlov thing
    if len(othermoves)<1:
      return False
    if othermoves[-1]:
      return not mymoves[-1]
    return mymoves[-1]

  if currentRound >= len(id) and othermoves[:len(id)]==id:
    return True
  return False


def AlexisTuchindaGrudgerLeader(mymoves, othermoves, currentRound): #grudger beats Pavolv, but also how does RAT outdo it?
  id = [False, True, False, True]

  if True not in othermoves:
    if currentRound < len(id):
      return id[currentRound]
    return True #instigating - to exploit followers & advantage of coops

  if othermoves.count(True) >1 or (currentRound >= len(id) and othermoves[:len(id)]!=id):
    if len(othermoves)<1:
      return False
    for i in range(currentRound-1):
      if othermoves[i] and othermoves[i+1]:
        return True
    return False

  if currentRound >= len(id) and othermoves[:len(id)]==id:
    return True
  return False

def AlexisTuchindaKittenFollower(mymoves, othermoves, currentRound):
  id = [False, True, False, True]

  if currentRound < 2:
    return False
  if othermoves[-2] and othermoves[-1]:
    if currentRound < len(id):
      return True
    if othermoves[:len(id)] == id and False not in othermoves[len(id):]:
      return False
    return True
  return False

def AlexisTuchindaGrudgerFollower(mymoves, othermoves, currentRound):
  id = [False, True, False, True]

  if currentRound < len(id):
    if othermoves.count(True)>1:
      return True
    return False
  if othermoves[:len(id)] != id or False in othermoves[len(id):]:
    return True
  return False

def AlexisTuchindaShortTemperFollower(mymoves, othermoves, current):
  id = [False, True, False, True]

  if len(mymoves)<len(id):
    if len(othermoves) > 2 and othermoves[-1] and othermoves[-2]:
      return True
    return False

  if othermoves[:len(id)] == id:
    if False in othermoves[len(id):]:
      #trust - it followed detective pattern - forgiving algorithm --> take advantage of 1 stabs, alternator

      if othermoves[len(id):].count(True)>=10:
        return True
      return not mymoves[-1]

    return False

  if othermoves[len(id):].count(True)>=10:
    return True

  if othermoves[-1] or othermoves[-2]:
    return True

  return False


#For All Ecosystems

def AlexisTuchindaAlternateDetectiveLeader(mymoves, othermoves, currentRound): #currentRound starts counting at 0
  id = [False, True, False, True]

  if len(mymoves)<len(id):
    return id[currentRound]

  if not othermoves[0] and not othermoves[1] and not othermoves[3]: #first level of trust - might be a follower or another algorithm

    if True in othermoves[len(id):]:
      if othermoves[-2] and othermoves[-1]:
        return True

      return not mymoves[-1]

    return True

  if othermoves.count(True) >  1 or (currentRound >= len(id) and othermoves[:len(id)]!=id):

    #be forgiving
    if othermoves[-2] and othermoves[-1]:
      return True

    #alternator
    return not mymoves[-1]

  if currentRound >= len(id) and othermoves[:len(id)]==id:
    return True
  return False


def AlexisTuchindaShortTemperDetective(mymoves, othermoves, currentRound):
  id = [False, True, False, False]

  if currentRound < len(id):
    return id[currentRound]

  if True in othermoves:
    return othermoves[-1]
  return True
