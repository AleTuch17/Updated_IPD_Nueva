def MaxRocheRandomRevengeAlternator(mymoves, othermoves, currentRound):
    randomness = 0.65
    #alternates for the whole game starting with cooperating until round 15 when it gets random but favoring betraying slightly until nuking past 35 rounds no matter what happens. this doesn't change at all with what the other person does, it just is an attempt to throw other algorithms off
    if currentRound > 35:
      return True
    if currentRound > 15:
      randNumber = random.random()
      if randNumber < randomness:
          return True
      return False
    else: 
        if len(othermoves) == 0:
            return False
        else:
              if mymoves [-1] is True:
                return False
              if mymoves [-1] is False:
                return True

def MaxRochePureAlternator(mymoves, othermoves, currentRound):
  #just a pure alternator that starts with cooperating
    if len(othermoves) == 0:
            return False
    else:
        if mymoves [-1] is True:
          return False
        if mymoves [-1] is False:
          return True

def MaxRocheAlternatorNukeForThreeTats(mymoves, othermoves, currentRound):
  #alternates true and false until 3 nukes happen in which case this nukes for the rest of the time
    if len(othermoves) == 0:
            return False
    if len(othermoves) > 8:
        if othermoves [-1] and othermoves [-2] and othermoves [-3] is True:
          return True
        else:
          if mymoves [-1] is True:
            return False
          if mymoves [-1] is False:
            return True
    else:
      if mymoves [-1] is True:
            return False
      if mymoves [-1] is False:
            return True

def MaxRocheNukefor3TatsPavlov(mymoves, othermoves, currentRound):
  #pavlov (if something was successful, keep doing it, otherwise switch) but if the other person betrays 3 times in a row, it nukes for the rest of the time.
    if len(othermoves) < 5:
            return False
    else:
        if othermoves [-1] and othermoves [-2] and othermoves [-3] is True:
          return True
        else:
          if mymoves [-1] is True:
            if othermoves [-1] is False:
              return True
            else:
              return False
          if mymoves [-1] is False:
            if othermoves [-1] is False:
              return False
            else: 
              return True
    return False

def MaxRochePurePavlov(mymoves, othermoves, currentRound):
  #if a move is successful, do it again! if not, change the move
  if len(othermoves) > 1:
    if mymoves [-1] is True:
            if othermoves [-1] is False:
              return True
            else:
              return False
    if mymoves [-1] is False:
            if othermoves [-1] is False:
              return False
            else: 
              return True
  return False

