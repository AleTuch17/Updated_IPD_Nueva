def MaxEmanuelSupport(mymoves, othermoves, currentRound):
  if len(othermoves) == 0:
    return False
  if len(othermoves) < 12 and True not in othermoves:
    return False
  if len(othermoves) == 12 and True not in othermoves:
    return False
  if len(othermoves) == 14 and True not in othermoves[0:12] and othermoves[12] and not othermoves[13]:
    return True
  if len(othermoves) > 12 and True not in othermoves[0:12] and othermoves[12] and True not in othermoves[13:15] and False not in othermoves[15:]:
    return False
  return True

def MaxEmanuelSpecialPavlov(mymoves, othermoves, currentRound):
  if len(othermoves) == 0:
    return False
  if len(othermoves) < 4:
    if (othermoves[-1] and mymoves[-1]) or (othermoves[-1] and not mymoves[-1]):
      return not mymoves[-1]
    if (not othermoves[-1] and not mymoves[-1]) or (not othermoves[-1] and mymoves[-1]):
      return mymoves[-1]
  if not othermoves[-1] and not othermoves[-2] and not othermoves[-3] and not othermoves[-4] and othermoves[-5]:
    return True
  if othermoves[-1] and othermoves[-2] and othermoves[-3]:
    return False
  if (othermoves[-1] and mymoves[-1]) or (othermoves[-1] and not mymoves[-1]):
    return not mymoves[-1]
  if (not othermoves[-1] and not mymoves[-1]) or (not othermoves[-1] and mymoves[-1]):
    return mymoves[-1]
  return False

def MaxEmanuelTfTf3CT(mymoves, othermoves, currentRound):
  if len(othermoves) == 0:
      return False
  if any(othermoves[i] and othermoves[i+1] and othermoves[i+2] for i in range(len(othermoves)-2)):
    if othermoves[-1]:
      return True
  return False

def MaxEmanuelTfTf3CTETf2T(mymoves, othermoves, currentRound):
  if len(othermoves) < 2:
      return False
  if any(othermoves[i] and othermoves[i+1] and othermoves[i+2] for i in range(len(othermoves)-2)):
    return not othermoves[-1]
  return othermoves[-1] and othermoves[-2]

def MaxEmanuelCoop(mymoves, othermoves, currentRound):
  return False

def MaxEmanuelTfTf2CT(mymoves, othermoves, currentRound):
  if len(othermoves) == 0:
      return False
  if any(othermoves[i] and othermoves[i+1] for i in range(len(othermoves)-1)):
    if othermoves[-1]:
      return True
  return False

def MaxEmanuelTf2CTf3CT(mymoves, othermoves, currentRound):
  if len(othermoves) == 0:
      return False
  if any(othermoves[i] and othermoves[i+1] and othermoves[i+2] for i in range(len(othermoves)-2)):
    if othermoves[-1] and othermoves[-2]:
      return True
  return False

def MaxEmanuelTf2CT(mymoves, othermoves, currentRound):
  if len(othermoves) < 2:
      return False
  if othermoves[-1] and othermoves[-2]:
    return True
  return False

def MaxEmanuelTf2CTNfE(mymoves, othermoves, currentRound):
  # tit for 2 consecutive tats or every three tats
  if len(othermoves) < 2:
    return False
  if othermoves[-1] and othermoves[-2]:
    return True
  if othermoves.count(True) > 0.4*len(othermoves):
    return True
  return False

def MaxEmanuelTf2TImperfect(mymoves, othermoves, currentRound):
  if len(othermoves) < 3:
    return False
  returnItem = othermoves[-1] and othermoves[-2]
  if random.random() < 0.1 and returnItem:
    returnItem = not returnItem
  return returnItem

def MaxEmanuelDetective3(mymoves, othermoves, currentRound):
  if len(othermoves) == 0:
    return False
  if len(othermoves) == 1:
    return True
  if not False in mymoves[1:]:
    if not True in othermoves:
      return True
    return False
  cheatInterval = mymoves[1:].index(False) - 1 - 1
  if cheatInterval == 0:
    return False
  if not False in mymoves[-cheatInterval:]:
    return False
  return True

def MaxEmanuelTf2CTf3CTSpecial(mymoves, othermoves, currentRound):
  if len(othermoves) == 0:
      return False
  if othermoves[-1] and not True in othermoves[:-1]:
    return True
  if othermoves[-10:].count(True) > 0.4*len(othermoves) and len(othermoves) > 7:
    return True
  if any(othermoves[i] and othermoves[i+1] and othermoves[i+2] for i in range(len(othermoves)-2)):
    if othermoves[-1] and othermoves[-2]:
      return True
  return False

def MaxEmanuelTf2CTf3CTLessSpecial(mymoves, othermoves, currentRound):
  if len(othermoves) == 0:
      return False
  if othermoves[-1] and not True in othermoves[:-1]:
    return True
  if any(othermoves[i] and othermoves[i+1] and othermoves[i+2] for i in range(len(othermoves)-2)):
    if othermoves[-1] and othermoves[-2]:
      return True
  return False

def MaxEmanuelTf2CTSpecial(mymoves, othermoves, currentRound):
  if len(othermoves) < 2:
      return False
  if othermoves[-1] and not True in othermoves[:-1]:
    return True
  if othermoves[-10:].count(True) > 0.4*len(othermoves) and len(othermoves) > 7:
    return True
  if othermoves[-1] and othermoves[-2]:
    return True
  return False

def MaxEmanuelTf2CTLessSpecial(mymoves, othermoves, currentRound):
  if len(othermoves) < 2:
      return False
  if othermoves[-1] and not True in othermoves[:-1]:
    return True
  if othermoves[-1] and othermoves[-2]:
    return True
  return False

def MaxEmanuelTfTf2CTSpecial(mymoves, othermoves, currentRound):
  if len(othermoves) == 0:
      return False
  if othermoves[-1] and not True in othermoves[:-1]:
    return True
  if othermoves[-10:].count(True) > 0.4*len(othermoves) and len(othermoves) > 7:
    return True
  if any(othermoves[i] and othermoves[i+1] for i in range(len(othermoves)-1)):
    if othermoves[-1]:
      return True
  return False

def MaxEmanuelTfTf2CTLessSpecial(mymoves, othermoves, currentRound):
  if len(othermoves) == 0:
      return False
  if othermoves[-1] and not True in othermoves[:-1]:
    return True
  if any(othermoves[i] and othermoves[i+1] for i in range(len(othermoves)-1)):
    if othermoves[-1]:
      return True
  return False

def MaxEmanuelTfTf3CTSpecial(mymoves, othermoves, currentRound):
  if len(othermoves) == 0:
      return False
  if othermoves[-1] and not True in othermoves[:-1]:
    return True
  if othermoves[-10:].count(True) > 0.4*len(othermoves) and len(othermoves) > 7:
    return True
  if any(othermoves[i] and othermoves[i+1] and othermoves[i+2] for i in range(len(othermoves)-2)):
    if othermoves[-1]:
      return True
  return False

def MaxEmanuelTfTf3CTLessSpecial(mymoves, othermoves, currentRound):
  if len(othermoves) == 0:
      return False
  if othermoves[-1] and not True in othermoves[:-1]:
    return True
  if any(othermoves[i] and othermoves[i+1] and othermoves[i+2] for i in range(len(othermoves)-2)):
    if othermoves[-1]:
      return True
  return False

def MaxEmanuelTf3CT(mymoves, othermoves, currentRound):
  if len(othermoves) < 3:
    return False
  if othermoves[-1] and othermoves[-2] and othermoves[-3]:
    return True
  return False

def MaxEmanuelTf3CTSpecial(mymoves, othermoves, currentRound):
  if len(othermoves) == 0:
    return False
  if othermoves[-1] and not True in othermoves[:-1]:
    return True
  if othermoves[-10:].count(True) > 0.4*len(othermoves) and len(othermoves) > 7:
    return True
  if len(othermoves) < 3:
    return False
  if othermoves[-1] and othermoves[-2] and othermoves[-3]:
    return True
  return False

def MaxEmanuelTf3CTLessSpecial(mymoves, othermoves, currentRound):
  if len(othermoves) == 0:
    return False
  if othermoves[-1] and not True in othermoves[:-1]:
    return True
  if len(othermoves) < 3:
    return False
  if othermoves[-1] and othermoves[-2] and othermoves[-3]:
    return True
  return False

def MaxEmanuelPercents2(mymoves, othermoves, currentRound):
  if len(othermoves) == 0:
    return False
  if othermoves.count(True) > len(othermoves)*0.75:
    return True
  if othermoves.count(True) < len(othermoves)*0.25:
    return False
  if othermoves[-1] and othermoves[-2]:
    return True
  return False

def MaxEmanuelSimpleAlternator(mymoves, othermoves, currentRound):
  return bool(len(othermoves) % 2)

def MaxEmanuelfTfTf3CT(mymoves, othermoves, currentRound):
  if len(othermoves) == 0:
      return False
  if any(othermoves[i] and othermoves[i+1] and othermoves[i+2] for i in range(len(othermoves)-2)):
    if othermoves[-1] and not any(othermoves[i+1] and not mymoves[i] and not othermoves[i+2] and mymoves[i+1] and othermoves[i+3] and not mymoves[i+2] and not othermoves[i+4] and mymoves[i+3] for i in range(len(othermoves[-10:])-4)):
      return True
  return False

def MaxEmanuelGetsMadder(mymoves, othermoves, currentRound):
  if len(othermoves) > 10 and othermoves.count(True) > 0.4 * len(othermoves):
    return othermoves[-1] and othermoves[-2]
  if len(othermoves) > 15 and othermoves.count(True) > 0.6 * len(othermoves):
    return othermoves[-1]
  if len(othermoves) > 20 and othermoves.count(True) > 0.8 * len(othermoves):
    return True
  return False

def MaxEmanuelGetsMadder2(mymoves, othermoves, currentRound):
  if len(othermoves) < 10:
    return False
  if othermoves.count(True) > 0.4 * len(othermoves):
    return othermoves[-1] and othermoves[-2]
  if othermoves.count(True) > 0.6 * len(othermoves):
    return othermoves[-1]
  if othermoves.count(True) > 0.8 * len(othermoves):
    return True
  return False

def MaxEmanuelGetsMadder3(mymoves, othermoves, currentRound):
  if len(othermoves) < 10:
    return False
  if othermoves.count(True) > 0.1 * len(othermoves):
    return othermoves[-1] and othermoves[-2]
  if othermoves.count(True) > 0.4 * len(othermoves):
    return othermoves[-1]
  if othermoves.count(True) > 0.6 * len(othermoves):
    return True
  return False