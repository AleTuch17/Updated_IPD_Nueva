########################################################################################
def PenelopeChungbot (mymoves, othermoves, currentRound):
  if currentRound < 5:
    return False
  if othermoves [0] and [1]==False and [2] and [3]==False and [4] and [5]==False:
    return False
  if othermoves [-1]==False and othermoves[-2]==False and othermoves[-3]==False:
    return False
  else:
    return True
########################################################################################
#effective against tit for 2 tats, more exploitative against nice algorithms
def PenelopeChungExploitativeAlternator (mymoves, othermoves, currentRound):
  if currentRound == 0:
    return True
  if currentRound > 2:
    if othermoves[-3] and othermoves [-2] and othermoves[-1]:
      return True
    if othermoves[-3]==False and othermoves [-2]==False and othermoves[-1]==False:
      return True
  if int(currentRound/2) == currentRound/2:
    return False
  if int(currentRound/2) != currentRound/2:
    return True
  return True
########################################################################################
#this strategy is effective against tit for 2 tats and will betray if other person betrays 3x in a row
def PenelopeChungEvolutionAlternator (mymoves, othermoves, currentRound):
  if currentRound == 0:
    return True
  #if they betray me 3x in a row, i betray them
  if currentRound > 2:
    if othermoves[-3] and othermoves [-2] and othermoves[-1]:
      return True
  #if they have betrayed me 8 times, I betray them
  # if currentRound>8:
  #   if othermoves.count(True)>8:
  #     return True
  if int(currentRound/2) == currentRound/2:
    return False
  if int(currentRound/2) != currentRound/2:
    return True
  return True
########################################################################################
#this strategy is for noise game
#classify into cooperater, alternator, and then go from there
def PenelopeChungDetectiveTitforTat (mymoves, othermoves, currentRound):
  cooperater = False
  alternator = False
#originally plays tit for tat, and then groups the person in to a category
  if currentRound <15:
    if len(othermoves) == 0:
      return True
    if othermoves[-1]:
      return True
    if othermoves[-1]==False:
      return False
    if othermoves.count(True)<=2:
      cooperater = True
    if othermoves[-1] and othermoves[-2]==False and othermoves[-3] and othermoves[-4]==False:
      alternator = True
    if othermoves[-1]==False and othermoves[-2] and othermoves[-3]==False and othermoves[-4]:
      alternator = True
  if cooperater == True:
    return True
  if alternator == True:
    if mymoves[-1] and mymoves[-2]:
      return False
    return True

  # if currentRound >=10 and currentRound<20:
  #   #if the opponent doesn't betray me more than twice, I cooperate
  #   if othermoves.count(True)<=2:
  #     return False
  #   #if the opponent betrays me more than twice, i betray sort them into a category
  #   #if they are a bot or a nuke and betray me many times in a row
  #   if othermoves[-3] and othermoves [-2] and othermoves[-1]:
  #     return True
  #   if othermoves[-3]==False and othermoves [-2]==False and othermoves[-1]==False:
  #     return True
  #     #if they are a forgiving tit for tat
  #     #if they are an alternator
  #     #
  #     return True
  else:
    if othermoves[-1]:
      return True
    if othermoves[-1]==False:
      return False

########################################################################################
#will start with tit for tat and either get more trusting or wary depending on opponents moves
# global cheater
# cheater = False
def PenelopeChungCheaterDetector (mymoves, othermoves, currentRound):
  # global cheater
  cheater = False
  if len(othermoves) == 0:
    return True
  if currentRound<=10:
    if othermoves[-1]:
      return True
    if othermoves[-1]==False:
      return False
    if othermoves.count(True)>4:
      cheater = True
    if othermoves.count(True)<4:
      cheater = False
  #if it is a cheater, use a more vengeful tit for tat
  if cheater == True:
    if othermoves[-1]:
      return True
    if othermoves[-2]:
      return True
    if othermoves[-1]==False:
      return False
  #if it isn't a cheater, use a less vengeful tit for tat
  if cheater == False:
    if othermoves[-1] and othermoves[-2]:
      return True
    if othermoves[-1]==False:
      return False
  return False

########################################################################################
def PenelopeChungNukeAfterFive (mymoves, othermoves, currentRound):
    #Stays silent until the other player rats five times. If the other player's rats 5 times this player rats forever.
  if len(othermoves) == 0:
    return False
  num_of_betray = 0
  for i in othermoves:
    if i:
      num_of_betray += 1
  if num_of_betray > 4: #you can change the 4 here to make this a nukeForXtats (remember that the number here should be one less than the number of tats)
    return True
  return False
########################################################################################
def PenelopeChungNukeAfterTen (mymoves, othermoves, currentRound):
    #Stays silent until the other player rats five times. If the other player's rats 5 times this player rats forever.
    if len(othermoves) == 0:
      return False
    num_of_betray = 0
    for i in othermoves:
      if i:
        num_of_betray += 1
    if num_of_betray > 9: #you can change the 4 here to make this a nukeForXtats (remember that the number here should be one less than the number of tats)
      return True
    else:
      return False
########################################################################################
def PenelopeChungPavlov(mymoves, othermoves, currentRound):
  if currentRound == 0:
    return False
  if currentRound == 1:
    return True
  if mymoves[-1] and othermoves[-1]:
    return False
  if mymoves[-1] and othermoves[-1]==False:
    return True
  if mymoves[-1]==False and othermoves[-1]:
    return True
  if mymoves[-1]==False and othermoves[-1]==False:
    return False
  return True
########################################################################################
def PenelopeChungTitForTat (mymoves, othermoves, currentRound):
  if currentRound==0:
    False
  if othermoves[-1]:
    return True
  if othermoves[-1]==False:
    return False
########################################################################################
def PenelopeChungTitForTwoTatsAdapted(mymoves, othermoves, currentRound):
    #Stays silent until the other player rats twice in a row. If the other player's last 2 moves is rat this player only rats for this round.
    #also checks for alternators
    if len(othermoves) < 2:
        return False
    if othermoves[-1] and othermoves[-2]:
        return True
    if len(othermoves)<4:
      return False
    # othermoves[-1] goes to the rightmost move and othermoves[-2] goes to the second rightmost move
    if othermoves[-1] and othermoves[-2]==False and othermoves[-3] and othermoves[-4]==False:
      return True
    if othermoves[-1]==False and othermoves[-2] and othermoves[-3]==False and othermoves[-4]:
      return True
    else:
        return False