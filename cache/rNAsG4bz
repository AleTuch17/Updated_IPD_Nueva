def MeherBhandariDetectivePoirot (mymoves, othermoves, currentRound):
  if currentRound == 0 or currentRound == 1 or currentRound == 3: #cooperate in r1, r2, and r4
    return False
  if currentRound == 2: #cheat in r3
    return True
  if True not in othermoves: #identify always cooperate
    randomness = 0.9 # 90% of the time
    randNumber = random.random()
    if randNumber < randomness:
      return True
  if False not in othermoves: #identify always betray
    randomness = 0.9 # 90% of the time
    randNumber = random.random()
    if randNumber < randomness:
      return True
  if othermoves[-1] != othermoves[-2] and othermoves[-3] != othermoves[-4]: #identify alternating
    return True
  if othermoves[-1] == mymoves[-2] and othermoves[-2] == mymoves[-3]: #identify TFT
    if not othermoves[-1]: #play pavlov, maybe move to after next if?
      return mymoves[-1]
    return not mymoves[-1]
  if mymoves[-1] and mymoves[-2] and mymoves[-3]: #if past 3 moves have been betrayals
    return False #reset cycle
  if currentRound < 50 :
    if othermoves[-1]: # if none of above conditions are met, play TFT (w/ trust)
      return True
  if currentRound < 100: # TF2T
    if othermoves[-1] and othermoves[-2]:
      return True
  if currentRound > 100: # TF3T
    if othermoves[-1] and othermoves[-2] and othermoves[-3]: 
      return True
  return False

def MeherBhandariDetectiveHolmes (mymoves, othermoves, currentRound):
  if currentRound == 0 or currentRound == 1 or currentRound == 3: #cooperate in r1, r2, and r4
    return False
  if currentRound == 2: #cheat in r3
    return True
  if othermoves[-1] != othermoves[-2] and othermoves[-3] != othermoves[-4]: #identify alternating
    return True
  if othermoves[-1] == mymoves[-2] and othermoves[-2] == mymoves[-3]: #identify TFT
    if not othermoves[-1]: #play pavlov, maybe move to after next if?
      return mymoves[-1]
    return not mymoves[-1]
  if mymoves[-1] and mymoves[-2] and mymoves[-3]: #if past 3 moves have been betrayals
    return False #reset cycle
  if currentRound < 50:
    if othermoves[-1]: # if none of above conditions are met, play TFT (w/ trust)
      return True
  if currentRound < 0: # TF2T
    if othermoves[-1] and othermoves[-2]:
      return True
  if currentRound > 100: # TF3T
    if othermoves[-1] and othermoves[-2] and othermoves[-3]: 
      return True
  return False

def MeherBhandariTrustier (mymoves, othermoves, currentRound):
  if currentRound == 0: #cooperate initially
    return False
  #if len(othermoves) > 10:
    #if True not in othermoves: # identify always cooperate
      #return True
    #if False not in othermoves: # identify always betray
      #return True
  if currentRound < 50: #tit for tat
    if not othermoves[-1]:
      return False
    return True
  if currentRound < 100: #tit for two tats
    if othermoves[-1] and othermoves[-2]:
      return True
    return False
  if othermoves[-1] and othermoves[-2] and othermoves[-3]: #tit for three tats
    return True
  return False

def MeherBhandariAlternate (mymoves, othermoves, currentRound):
  if currentRound == 0 or currentRound == 1:
    return False
  if (currentRound%2) == 0:
    return False
  return True

def MeherBhandariPavlovNoise (mymoves, othermoves, currentRound):
  if len(othermoves) == 0:
    return False
  if othermoves[-1] == False:
    randomness = 0.9
    randNumber = random.random()
    if randNumber < randomness:
      return mymoves[-1]
  return not mymoves[-1]

def MeherBhandariNukeForTwoTats(mymoves, othermoves, currentRound):
    if len(othermoves) < 2:
      return False
    indices = [i for i, x in enumerate(othermoves) if x == True]
    for i in range(len(indices)-1):
      if indices[i] == indices[i+1]-1:
        return True
    return False

def MeherBhandariTatForTwoTats(mymoves, othermoves, currentRound):
  if len(othermoves) < 2:
    return False
  if othermoves[-1] and othermoves[-2]:
    return False
  return True

def MeherBhandariTitForTat(mymoves, othermoves, currentRound):
    if len(othermoves) == 0:
        return False
    if othermoves[-1]:
        return True
    return False

def MeherBhandariBetray(mymoves, othermoves, currentRound): #always betrays
    return True
    
def MeherBhandariCooperate(mymoves, othermoves, currentRound): #always cooperates
    return False