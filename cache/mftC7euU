def VincaLubasedNoNoise(mymoves, othermoves, currentRound):
    seq = [False, False, True, False, True, True, False, False, True, True, True, False, False]
    nrat = 0
    mybot = True
    totalgrudge = 0
    countgrudge = 0
    grud = True
    forgiveness = 0
    someotherstat = 0
    if currentRound < 13:
      return seq[currentRound]
    if 12 < currentRound < 200:
      for move in othermoves:
        if move:
          mybot = False
          break
      if mybot == True:
        return True
      else:
        for i in range(3, 11):
          if mymoves[-i] and mymoves[-i-1] and mymoves[-i-2]:
            if othermoves[-i-1]:
              if forgiveness < 1:
                forgiveness = 1
            if not othermoves[-i-1] and othermoves[-i]:
              if forgiveness < 2:
                forgiveness = 2
            if not othermoves[-i-1] and not othermoves[-i]:
              if forgiveness < 3:
                forgiveness = 3
          elif mymoves[-i] and mymoves[-i-1] and not mymoves[-i+1]:
            if othermoves[-i]:
              if forgiveness < 1:
                forgiveness = 1
            if not othermoves[-i-1] and othermoves[-i]:
              if forgiveness < 2:
                forgiveness = 2
          elif mymoves[-i] and not mymoves[-i+1]:
            if othermoves[-i+1]:
              if forgiveness < 1:
                forgiveness = 1
          #something to detect grudge
          if mymoves[-i-1] and not mymoves[-i]:
            for j in range(i, 1):
              if othermoves[-j]:
                countgrudge += 1
              else:
                break
            if countgrudge > totalgrudge:
              totalgrudge = countgrudge
            countgrudge = 0
      for k in range(1, 6):
        if mymoves[-k]:
          nrat += 1
        else:
          break
      if nrat < forgiveness or nrat < totalgrudge:
        return True
      else:
        return False
    if currentRound == 200:
        return True

def VincaLubot1no(mymoves, othermoves, currentRound):
    seq = [False, False, True, False, True, True, False, False, True, True, True, False, False]
    mysol = True
    if currentRound < 13:
      return False
    #if currentRound == 6:
      #return True
    if currentRound >= 13:
      for i in range(0, 13):
        if othermoves[i] != seq[i]:
          mysol = False
          break
      if mysol == True:
        return False
      else:
        return True

def VincaLubot2no(mymoves, othermoves, currentRound):
    seq = [False, False, True, False, True, True, False, False, True, True, True, False, False]
    mysol = True
    if currentRound < 13:
      return False
    #if currentRound == 6:
      #return True
    if currentRound >= 13:
      for i in range(0, 13):
        if othermoves[i] != seq[i]:
          mysol = False
          break
      if mysol == True:
        return False
      else:
        return True

def VincaLubot3no(mymoves, othermoves, currentRound):
    seq = [False, False, True, False, True, True, False, False, True, True, True, False, False]
    mysol = True
    if currentRound < 13:
      return False
    if currentRound >= 13:
      for i in range(0, 13):
        if othermoves[i] != seq[i]:
          mysol = False
          break
      if mysol == True:
        return False
      else:
        return True

def VincaLubot4no(mymoves, othermoves, currentRound):
    seq = [False, False, True, False, True, True, False, False, True, True, True, False, False]
    mysol = True
    if currentRound < 13:
      return False
    if currentRound >= 13:
      for i in range(0, 13):
        if othermoves[i] != seq[i]:
          mysol = False
          break
      if mysol == True:
        return False
      else:
        return True

def VincaLubot5no(mymoves, othermoves, currentRound):
    seq = [False, False, True, False, True, True, False, False, True, True, True, False, False]
    mysol = True
    if currentRound < 13:
      return False
    if currentRound >= 13:
      for i in range(0, 13):
        if othermoves[i] != seq[i]:
          mysol = False
          break
      if mysol == True:
        return False
      else:
        return True

def VincaLubot6no(mymoves, othermoves, currentRound):
    seq = [False, False, True, False, True, True, False, False, True, True, True, False, False]
    mysol = True
    if currentRound < 13:
      return False
    if currentRound >= 13:
      for i in range(0, 13):
        if othermoves[i] != seq[i]:
          mysol = False
          break
      if mysol == True:
        return False
      else:
        return True

def VincaLubot7no(mymoves, othermoves, currentRound):
    seq = [False, False, True, False, True, True, False, False, True, True, True, False, False]
    mysol = True
    if currentRound < 13:
      return False
    if currentRound >= 13:
      for i in range(0, 13):
        if othermoves[i] != seq[i]:
          mysol = False
          break
      if mysol == True:
        return False
      else:
        return True

def VincaLubot8no(mymoves, othermoves, currentRound):
    seq = [False, False, True, False, True, True, False, False, True, True, True, False, False]
    mysol = True
    if currentRound < 13:
      return False
    if currentRound >= 13:
      for i in range(0, 13):
        if othermoves[i] != seq[i]:
          mysol = False
          break
      if mysol == True:
        return False
      else:
        return True

def VincaLubot9no(mymoves, othermoves, currentRound):
    seq = [False, False, True, False, True, True, False, False, True, True, True, False, False]
    mysol = True
    if currentRound < 13:
      return False
    if currentRound >= 13:
      for i in range(0, 13):
        if othermoves[i] != seq[i]:
          mysol = False
          break
      if mysol == True:
        return False
      else:
        return True