def naomieChienDetective(mymoves, othermoves, currentRound):
  # Tit for tat until 6th move, classifies opponent, plays best strategy
  other = "move"
  if len(mymoves) < 6:
    return True if othermoves[-1:] == [True] else False
  if len(mymoves) % 6 == 0:
    if othermoves[-6:] == [False] * 6:
      other = "Coop"
    if othermoves[-6:] == [True] * 6:
      other = "Cheat"
    if othermoves[-6:] == [True, False, True, False, True, False]:
      other = "STFT"
    if othermoves[-6:] == [True, True, False, True, True, False]:
      other = "PavlovD"
    if not other:
      other = "Random"
 
  # Play according to classification
  if other in ["Random", "Cheat"]:
    return True
  if other == "STFT":
    if len(mymoves) % 6 in [0, 1]:
      return False
  # TFT
  if othermoves[-1:] == [True]:
    return True
  if other == "PavlovD":
  # Return D then C for the period
    if len(mymoves) % 6 == 0:
      return True
    if other == "Coop":
      # TFT
      if othermoves[-1:] == [True]:
        return True
  return False
def naomieChienTitforTattoCheat(mymoves, othermoves, currentRound):
  # Tit for tat, then relentlessly defects at Round 80 and beyond
  if currentRound >= 80:
    return True
  if currentRound <= 80:
    if othermoves[-1:] == [True]:
     return True
    return False
def naomieChienCopyCooperate(mymoves, othermoves, currentRound):
  # Checks if the same move was made: if so, cooperate, otherwise defect with 5/7 certainty
  if len(mymoves) == 0 or mymoves[-1] == othermoves[-1]:
            return False
  else:
    ran = random.random()
    if ran <= 2/7:
      return False
    return True
def naomieChienNukeforTwoTats(mymoves, othermoves, currentRound):
  # Cooperates first two moves, nuke for two tats
  if len(othermoves) < 2:
        return False
  indices = [i for i, x in enumerate(othermoves) if x == True]
  for i in range(len(indices)-1):
    if indices[i] == indices[i+1]-1:
      return True
  return False
def naomieChienSusTitforTat(mymoves, othermoves, currentRound):
  # Tit for tat but starts with defect
  if len(othermoves) == 0:
    return True
  if othermoves[-1]:
    return True
  return False
def naomieChien10PercentRetaliate(mymoves, othermoves, currentRound):
  # Counts the number of times player win versus opponent wins, starts by cooperating but will retaliate once opponent has won more than 10% times player defections
  betrays = 0
  losses = 0
  wins = 0
  for i in othermoves:
    if i:
      betrays += 1
  for i in othermoves:
    if i:
      if othermoves[-1] == True and mymoves[-1] == False:
        losses += 1
  for i in mymoves:
    if i:
      if mymoves[-1] == True and othermoves[-1] == False:
        wins += 1
  if wins > losses*0.1:
    return True
  return False
