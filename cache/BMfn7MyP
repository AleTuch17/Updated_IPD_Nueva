def marcusNoiseBetrayalPercentOne(mymoves, othermoves, currentRound):
     if currentRound < 10:
      return othermoves[-1]

    if currentRound >=20:
      if othermoves[-1] and othermoves.count(True) / currentRound > 0.10:
        return True
    return False

def marcusNoiseBetrayalPercentTwo(mymoves, othermoves, currentRound):
     if currentRound < 15:
      return othermoves[-1]

    if currentRound >=20:
      if othermoves[-1] and othermoves.count(True) / currentRound > 0.10:
        return True
    return False

def marcusNoiseBetrayalPercentThree(mymoves, othermoves, currentRound):
     if currentRound < 20:
      return othermoves[-1]

    if currentRound >=20:
      if othermoves[-1] and othermoves.count(True) / currentRound > 0.10:
        return True
    return False

def marcusNoiseBetrayalPercentFour(mymoves, othermoves, currentRound):
     if currentRound < 10:
      return othermoves[-1]

    if currentRound >=20:
      if othermoves[-1] and othermoves.count(True) / currentRound > 0.20:
        return True
    return False

def marcusNoiseBetrayalPercentFive(mymoves, othermoves, currentRound):
     if currentRound < 15:
      return othermoves[-1]

    if currentRound >=20:
      if othermoves[-1] and othermoves.count(True) / currentRound > 0.20:
        return True
    return False

def marcusNoiseBetrayalPercentSix(mymoves, othermoves, currentRound):
     if currentRound < 20:
      return othermoves[-1]

    if currentRound >=20:
      if othermoves[-1] and othermoves.count(True) / currentRound > 0.20:
        return True
    return False

def marcusNoiseBetrayalPercentSeven(mymoves, othermoves, currentRound):
     if currentRound < 10:
      return othermoves[-1]

    if currentRound >=20:
      if othermoves[-1] and othermoves.count(True) / currentRound > 0.80:
        return True
    return False

def marcusNoiseBetrayalPercentEight(mymoves, othermoves, currentRound):
     if currentRound < 15:
      return othermoves[-1]

    if currentRound >=20:
      if othermoves[-1] and othermoves.count(True) / currentRound > 0.60:
        return True
    return False

def marcusNoiseBetrayalPercentNine(mymoves, othermoves, currentRound):
     if currentRound < 20:
      return othermoves[-1]

    if currentRound >=20:
      if othermoves[-1] and othermoves.count(True) / currentRound > 0.60:
        return True
    return False



