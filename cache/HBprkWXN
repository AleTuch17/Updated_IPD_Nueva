def AryanMehraNoiseTrustingCooperator(mymoves, othermoves, currentRound):
  main_pattern = [False, True, False, True, False, False]
  feeder_pattern = [True, False, True, True, False, False]
  bucky_pattern = [False, False, False, False, False, True, False]

  max_pattern_discrepancies = 1
  bucky_max_pattern_discrepancies = 1

  if currentRound < len(main_pattern):
    return main_pattern[currentRound]
  else:
    pattern_discrepancies = 0
    for other, expected in zip(othermoves[:len(feeder_pattern)], feeder_pattern):
      if (other != expected):
        pattern_discrepancies += 1

    bucky_pattern_discrepancies = 100000
    if currentRound < len(bucky_pattern):
      bucky_pattern_discrepancies = 0
      for other, expected in zip(othermoves[:len(bucky_pattern)], bucky_pattern):
        if (other != expected):
          bucky_pattern_discrepancies += 1

    if (pattern_discrepancies <= max_pattern_discrepancies) or (bucky_pattern_discrepancies <= bucky_max_pattern_discrepancies):
      return True
    else:
      trust = 0
      other_cooperativeness = othermoves.count(False)/len(othermoves)
      initial_trust = 1/currentRound
      trust = initial_trust + other_cooperativeness

      if trust > 0.85: # Always cooperate
        return False
      if trust > 0.6: # Plays tit for tat
        if othermoves[-1] == True:
          return True
        if othermoves[-1] == False:
            False
      if trust > 0.25: # Two tits for one tat
        if othermoves[-1] == True:
          return True
        if (othermoves[-2] == True) and (mymoves[-1] == True):
          return True
        return False
      return True


def AryanMehraNoiseFeeder1(mymoves, othermoves, currentRound):
  main_pattern = [False, True, False, True, False, False]
  feeder_pattern = [True, False, True, True, False, False]

  max_pattern_discrepancies = 1

  if currentRound < len(feeder_pattern):
    return feeder_pattern[currentRound]
  else:
    pattern_discrepancies = 0
    for other, expected in zip(othermoves[:len(main_pattern)], main_pattern):
      if (other != expected):
        pattern_discrepancies += 1

    if pattern_discrepancies <= max_pattern_discrepancies:
      return False
    else:
      return True

def AryanMehraNoiseFeeder2(mymoves, othermoves, currentRound):
  main_pattern = [False, True, False, True, False, False]
  feeder_pattern = [True, False, True, True, False, False]

  max_pattern_discrepancies = 1

  if currentRound < len(feeder_pattern):
    return feeder_pattern[currentRound]
  else:
    pattern_discrepancies = 0
    for other, expected in zip(othermoves[:len(main_pattern)], main_pattern):
      if (other != expected):
        pattern_discrepancies += 1

    if pattern_discrepancies <= max_pattern_discrepancies:
      return False
    else:
      return True

def AryanMehraNoiseFeeder3(mymoves, othermoves, currentRound):
  main_pattern = [False, True, False, True, False, False]
  feeder_pattern = [True, False, True, True, False, False]

  max_pattern_discrepancies = 1

  if currentRound < len(feeder_pattern):
    return feeder_pattern[currentRound]
  else:
    pattern_discrepancies = 0
    for other, expected in zip(othermoves[:len(main_pattern)], main_pattern):
      if (other != expected):
        pattern_discrepancies += 1

    if pattern_discrepancies <= max_pattern_discrepancies:
      return False
    else:
      return True

def AryanMehraNoiseFeeder4(mymoves, othermoves, currentRound):
  main_pattern = [False, True, False, True, False, False]
  feeder_pattern = [True, False, True, True, False, False]

  max_pattern_discrepancies = 1

  if currentRound < len(feeder_pattern):
    return feeder_pattern[currentRound]
  else:
    pattern_discrepancies = 0
    for other, expected in zip(othermoves[:len(main_pattern)], main_pattern):
      if (other != expected):
        pattern_discrepancies += 1

    if pattern_discrepancies <= max_pattern_discrepancies:
      return False
    else:
      return True

def AryanMehraNoiseFeeder5(mymoves, othermoves, currentRound):
  main_pattern = [False, True, False, True, False, False]
  feeder_pattern = [True, False, True, True, False, False]

  max_pattern_discrepancies = 1

  if currentRound < len(feeder_pattern):
    return feeder_pattern[currentRound]
  else:
    pattern_discrepancies = 0
    for other, expected in zip(othermoves[:len(main_pattern)], main_pattern):
      if (other != expected):
        pattern_discrepancies += 1

    if pattern_discrepancies <= max_pattern_discrepancies:
      return False
    else:
      return True


def AryanMehraNoiseFeeder6(mymoves, othermoves, currentRound):
  main_pattern = [False, True, False, True, False, False]
  feeder_pattern = [True, False, True, True, False, False]

  max_pattern_discrepancies = 1

  if currentRound < len(feeder_pattern):
    return feeder_pattern[currentRound]
  else:
    pattern_discrepancies = 0
    for other, expected in zip(othermoves[:len(main_pattern)], main_pattern):
      if (other != expected):
        pattern_discrepancies += 1

    if pattern_discrepancies <= max_pattern_discrepancies:
      return False
    else:
      return True

def AryanMehraNoiseFeeder7(mymoves, othermoves, currentRound):
  main_pattern = [False, True, False, True, False, False]
  feeder_pattern = [True, False, True, True, False, False]

  max_pattern_discrepancies = 1

  if currentRound < len(feeder_pattern):
    return feeder_pattern[currentRound]
  else:
    pattern_discrepancies = 0
    for other, expected in zip(othermoves[:len(main_pattern)], main_pattern):
      if (other != expected):
        pattern_discrepancies += 1

    if pattern_discrepancies <= max_pattern_discrepancies:
      return False
    else:
      return True

def AryanMehraNoiseFeeder8(mymoves, othermoves, currentRound):
  main_pattern = [False, True, False, True, False, False]
  feeder_pattern = [True, False, True, True, False, False]

  max_pattern_discrepancies = 1

  if currentRound < len(feeder_pattern):
    return feeder_pattern[currentRound]
  else:
    pattern_discrepancies = 0
    for other, expected in zip(othermoves[:len(main_pattern)], main_pattern):
      if (other != expected):
        pattern_discrepancies += 1

    if pattern_discrepancies <= max_pattern_discrepancies:
      return False
    else:
      return True


def AryanMehraNoiseFeeder9(mymoves, othermoves, currentRound):
  main_pattern = [False, True, False, True, False, False]
  feeder_pattern = [True, False, True, True, False, False]

  max_pattern_discrepancies = 1

  if currentRound < len(feeder_pattern):
    return feeder_pattern[currentRound]
  else:
    pattern_discrepancies = 0
    for other, expected in zip(othermoves[:len(main_pattern)], main_pattern):
      if (other != expected):
        pattern_discrepancies += 1

    if pattern_discrepancies <= max_pattern_discrepancies:
      return False
    else:
      return True