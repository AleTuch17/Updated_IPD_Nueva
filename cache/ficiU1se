#NoNoiseStrats(DONE)
def AnikaGuptaNukeFor3tats (mymoves, othermoves, currentRound):
  #stays silent until the other player rats 3 times, then rats forever
  if len(othermoves)==0:
    return False
  num_of_betray = 0
  for i in othermoves:
    if i:
      num_of_betray += 1
  if num_of_betray >2:
    return True
  else:
      return False


def AnikaFeederBaiterTitforTat (mymoves, othermoves, currentRound):
  bottarget=[False, False, False, False, False, False, False, False, False, False]
  if len(othermoves)==0:
    return False
  if len(othermoves)==1:
    return False
  if len(othermoves)==2:
    return False
  if len(othermoves)==3:
    return True
  if len(othermoves)==4:
    return False
  if len(othermoves)>4:
    if othermoves[:len(bottarget)]==bottarget:
      return True
    else: 
      if othermoves[-1]:
          return True
      return False

def AnikaFeeder1 (mymoves, othermoves, currentRound):
  target_sequence = [False, False, False, True, False]
  if currentRound<=4: 
    return False
  if currentRound >4: 
    if othermoves[:len(target_sequence)]==target_sequence:
      return False
    else: 
      return True

def AnikaFeeder2 (mymoves, othermoves, currentRound):
  target_sequence = [False, False, False, True, False]
  if currentRound<=4: 
    return False
  if currentRound >4: 
    if othermoves[:len(target_sequence)]==target_sequence:
      return False
    else: 
      return True

def AnikaFeeder3 (mymoves, othermoves, currentRound):
  target_sequence = [False, False, False, True, False]
  if currentRound<=4: 
    return False
  if currentRound >4: 
    if othermoves[:len(target_sequence)]==target_sequence:
      return False
    else: 
      return True

def AnikaFeeder4 (mymoves, othermoves, currentRound):
  target_sequence = [False, False, False, True, False]
  if currentRound<=4: 
    return False
  if currentRound >4: 
    if othermoves[:len(target_sequence)]==target_sequence:
      return False
    else: 
      return True

def AnikaFeeder5 (mymoves, othermoves, currentRound):
  target_sequence = [False, False, False, True, False]
  if currentRound<=4: 
    return False
  if currentRound >4: 
    if othermoves[:len(target_sequence)]==target_sequence:
      return False
    else: 
      return True

def AnikaFeeder6 (mymoves, othermoves, currentRound):
  target_sequence = [False, False, False, True, False]
  if currentRound<=4: 
    return False
  if currentRound >4: 
    if othermoves[:len(target_sequence)]==target_sequence:
      return False
    else: 
      return True



def AnikaTitforTat(mymoves, othermoves, currentRound):
  if len(othermoves) == 0:
        return False
  if othermoves[-1]:
        return True
  return False


def AnikaGuptaPavlov (mymoves, othermoves, currentRound):
     if currentRound == 0:
        return False
     if othermoves[-1]: #if you betray
      if mymoves[-1]: #and i did true
        return False#i do the opposite (false)
      return True# but if i did false, i do true
     if not othermoves[-1]:#if you coop
      if mymoves[-1]:#if i did true
        return True#i do the same thing, return true
      return False#otherwise i do the same thing, return false
