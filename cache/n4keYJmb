def RykerLawNoisePrimaryGTFT (mymoves, othermoves, currentRound):
  if currentRound==0:
    return False
  if othermoves[-1]:
    randomness = 0.9
    randNumber = random.random()
    if randNumber < randomness:
      return False
  return True

def RykerLawNoiseSecondaryLackofCare (mymoves,othermoves,currentRound):
  if currentRound==0:
    return False
  if mymoves[-1]:
    return False
  return True

def RykerLawNoiseTertiaryCTFT (mymoves, othermoves, currentRound):
  CTFTvalue=0
  if currentRound==0:
    return False
  if currentRound==1:
    return True
  if currentRound==2:
    return False
  if othermoves[-1] and not mymoves[-2] and not mymoves[-1]:
    CTFTvalue==1
  if not othermoves[-1] and mymoves[-1] and mymoves[-2]:
    CTFTvalue==0
  if othermoves[-1] and not mymoves[-2] and not mymoves[-3]:
    CTFTvalue==2
  if CTFTvalue==0:
    return False
  if CTFTvalue==1:
    return True
  if CTFTvalue==2:
    CTFTvalue==0
    return False
  return True

def RykerLawNoiseQuarternaryTFT (mymoves, othermoves, currentRound):
  if currentRound <5:
    return bool(random.getrandbits(1))
  if othermoves[-1]:
        return True
  return False

def RykerLawNoiseQuinaryRat(mymoves, othermoves, currentRound):
    return True

def RykerLawNoiseSenaryLackofCare2 (mymoves,othermoves,currentRound):
  if currentRound==0:
    return True
  if mymoves[-1]:
    return False
  return True

def RykerLawNoiseOctonaryDecreasingRandom (mymoves, othermoves, currentRound):
  randomness=0.5
  if currentRound==0:
    return True
  if othermoves[-1]:
    randomness==randomness+0.001
  randNumber = random.random()
  if randNumber < randomness:
    return True
  return False

def RykerLawNoiseNovenaryBackwardsTFT (mymoves, othermoves, currentRound):
  if len(othermoves) == 0:
    return False
  if othermoves[-1]:
    return False
  return True

def RykerLawNoiseDenaryNF2T (mymoves, othermoves, currentRound):
  if len(othermoves) < 2:
    return False
  indices = [i for i, x in enumerate(othermoves) if x == True]
  for i in range(len(indices)-1):
    if indices[i] == indices[i+1]-1:
      return True
  return False