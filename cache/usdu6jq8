def RachelYunAdaptedTFT(mymoves, othermoves, currentRound):

  #Function: TFT, except it defects on the last and second-to-last rounds. 
  #Defects on round 199 to catch opponent off-guard and collect some extra payoff.
  
  if currentRound==199 or currentRound==200:
    return True

  if len(othermoves) == 0:
    return False
  if othermoves[-1]:
    return True
  return False
 
 
 
def RachelYunAdaptedTFTT(mymoves, othermoves, currentRound):

  # Function: TFTT, except it defects on the last and second-to-last rounds. 
  # Defects on round 199 to catch opponent off-guard and collect some extra payoff.
  
  if currentRound==199 or currentRound==200:
    return True

  if len(othermoves) < 2:
      return False
  if othermoves[-1] and othermoves[-2]:
      return True
  else:
      return False
 
 
def RachelYunSoftMajority(mymoves, othermoves, currentRound):

  # Every round, do the following:
     # Look at the previous two rounds. If the opponent defected in both rounds, you defect.
     # Look at the previous four rounds. If the opponent defected in 3 of the 4, you defect.
     # Look at the previous six rounds. If the opponent defected in 4 of the 6, you defect.
     # Look at the previous eight rounds. If the opponent defected in 5 of the 8, you defect.
  # etc. until you have reached back to the beginning of the game.
  # Makes it somewhat forgiving and takes into account the opponent's recent actions.
  
  if currentRound <= 1: #first and second round, cooperate
      return False

  endRound = currentRound
  startRound = endRound-2
  numIt = 0
  while startRound >= 0 and numIt < 2:
    numOpponentDefects = sum([1 for x in othermoves[startRound:endRound] if x==True])
    numRounds = endRound - startRound
    if 2*numOpponentDefects > numRounds:
      return True
    startRound = startRound - 2
    numIt +=1
  return False



def RachelYunOriginal(mymoves, othermoves, currentRound):

  # original strategy incorporating soft majority algorithm. Strategy:
        # First round: Cooperate
        # Second round: cooperate
        # Third round: defect
        # If they have defected two or three times at that point, you switch to soft majority strategy
        # If they have defected 0 or 1 times in the first 3 rounds:
            # your 4th move is cooperate
        # If they cooperate in round 4 after you defect:
            # you should defect in round 5 and then alternate until they defect twice in a row
                # When they defect twice in a row, switch to soft majority
                
  #In-line comments for more detail.

  def RachelYunSoftMajority(mymoves, othermoves, currentRound):
    if currentRound <= 1:
        return False

    endRound = currentRound
    startRound = endRound-2
    while startRound >= 0:
      numOpponentDefects = sum([1 for x in othermoves[startRound:endRound] if x==True])
      numRounds = endRound - startRound
      if 2*numOpponentDefects > numRounds:
        return True
      startRound = startRound - 2
    return False

  # first 2 rounds
  if currentRound<=1:
    return False
  # round 3
  elif currentRound==2:
    return True
  # round 4
  elif currentRound==3:
    # if other defected >1 times in the first 3 rounds, switch to soft majority
    if sum([1 for x in othermoves[:3] if x==True]) > 1:
      return RachelYunSoftMajority(mymoves, othermoves, currentRound)
    else: # otherwise cooperate
      return False
  # round 5:
  elif currentRound==4:
    if othermoves[3]==False:  # if other cooperated in round 4, then defect
      return True
    else:
      return RachelYunSoftMajority(mymoves, othermoves, currentRound)
  # rounds 6+
  else:
    # if other defected twice in a row switch to soft majority
    if (othermoves[currentRound-1]==True and othermoves[currentRound-2]==True):
      return RachelYunSoftMajority(mymoves, othermoves, currentRound)
    else:
      if mymoves[currentRound-1]==True:
        return False
      else:
        return True
    
    
    
def RachelYunTitForTwotats(mymoves, othermoves, currentRound):
    #Stays silent until the other player rats twice in a row. If the other player's last 2 moves is rat this player only rats for this round.
    if len(othermoves) < 2:
        return False
    if othermoves[-1] and othermoves[-2]:
        return True
    else:
        return False
    
    
def RachelYunNukeForTwotats(mymoves, othermoves, currentRound):
    #Stays silent until the other player rats twice. If the other player's rats twice this player rats forever.
    if len(othermoves) < 2:
        return False
    indices = [i for i, x in enumerate(othermoves) if x == True]
    for i in range(len(indices)-1):
        if indices[i] == indices[i+1]-1:
            return True
    return False


def RachelYunAdaptivePavlov(mymoves, othermoves, currentRound):

  # Strategy:
    # TFT for first 6 rounds to categorize opponent into different categories and then place an optimal strategy for each one
    # If:
      # Defects 0 or 1 times:
          # cooperative: play TFT
      # Defects 3 times:
          # STFT: play TFTT (tit for two tats)
      # Defects at 5 or 6 times:
          # AIID: always defect
      # All other cases (2, or 4 defects):
          # random: always defect
          
    #src: APavlov (https://www.graham-kendall.com/papers/lhk2011.pdf)
    

  # create a static variable
  if not hasattr(RachelYunAdaptivePavlov, "opponent"):
    RachelYunAdaptivePavlov.opponent = ""


  def titFortat(mymoves, othermoves, currentRound):
    #Stays silent until the other player rats. If the other player's last move is rat this player only rats for this round.
    if len(othermoves) == 0:
        return False
    if othermoves[currentRound-1]:
        return True
    return False

  def computeAveragePayoff(mymoves, othermoves, currentRound):
    payoff=0
    for i in range(currentRound-6, currentRound):
      if mymoves[i] and othermoves[i]:
        payoff += 1
      elif mymoves[i] and othermoves[i]==False:
        payoff += 9
      elif mymoves[i]==False and othermoves[i]==False:
        payoff += 5
    average_payoff = payoff/6
    return average_payoff

  if currentRound < 6:  # for first 6 rounds do tit-for-tat
    return titFortat(mymoves, othermoves, currentRound)

  if currentRound % 6 == 0: # after every 6 rounds of history, check average payoff.  If < threshold reclassify opponent
    avgPayoff = computeAveragePayoff(mymoves, othermoves, currentRound)
    threshold = 4
    if currentRound==6 or avgPayoff < threshold:
      num_opponent_defects_in_last_six_rounds = sum([1 for x in othermoves[-6:] if x==True])
      if num_opponent_defects_in_last_six_rounds == 0:
        RachelYunAdaptivePavlov.opponent = "COOP"
      elif num_opponent_defects_in_last_six_rounds > 4:
        RachelYunAdaptivePavlov.opponent = "ALLD"
      elif num_opponent_defects_in_last_six_rounds == 3:
        RachelYunAdaptivePavlov.opponent = "STFT"
      else:
        RachelYunAdaptivePavlov.opponent = "RANDOM"

  if RachelYunAdaptivePavlov.opponent == "COOP":
    return titFortat(mymoves, othermoves, currentRound)
  elif RachelYunAdaptivePavlov.opponent == "ALLD" or RachelYunAdaptivePavlov.opponent == "RANDOM":
    return True
  else:
    if othermoves[currentRound-1]==True and othermoves[currentRound-2]==True:
      return True
    else:
      return False



def RachelYunNPavlov(mymoves, othermoves, currentRound):

  # src: https://plato.stanford.edu/entries/prisoner-dilemma/strategy-table.html

  import numpy as np

  # create a static variable
  if not hasattr(RachelYunNPavlov, "previousProbabilityOfCooperation"):
    RachelYunNPavlov.previousProbabilityOfCooperation = 1.0

  if currentRound == 0:
    return True

  probabilityOfCooperation = RachelYunNPavlov.previousProbabilityOfCooperation
  i = currentRound - 1
  if mymoves[i] and othermoves[i]: # R, R (I ratted, opponent ratted)
    probabilityOfCooperation -= 1.0/(currentRound+1)
  elif mymoves[i] and othermoves[i]==False: # R, C (I ratted, opponent cooperated)
    probabilityOfCooperation += 2.0/(currentRound+1)
  elif mymoves[i]==False and othermoves[i]==False: # C, C
    probabilityOfCooperation += 1.0/(currentRound+1)
  else: # C, R
    probabilityOfCooperation -= 2.0/(currentRound+1)

  if probabilityOfCooperation > 1.0:
    probabilityOfCooperation = 1.0
  elif probabilityOfCooperation < 0.0:
    probabilityOfCooperation = 0.0

  RachelYunNPavlov.previousProbabilityOfCooperation = probabilityOfCooperation

  p = np.random.uniform(low=0, high=1, size=1)
  if p <= probabilityOfCooperation:
    return False
  else:
    return True