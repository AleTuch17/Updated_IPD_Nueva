def DavisDietzenNONOISEidkbomb(mymoves, othermoves, currentRound):
  num_of_betray = 0
  for i in othermoves:
    if i:
      num_of_betray += 1
  if currentRound < 10:
    return False
  if num_of_betray <= currentRound * 0.1:
    return False
  else:
    return True

def DavisDietzenNONOISEuf75tt(mymoves, othermoves, currentRound):
    if currentRound < 2:
      return False
    num_of_betray = 0
    for i in othermoves:
      if i:
        num_of_betray += 1
    if currentRound / 2.5 <= num_of_betray:
      if othermoves[-2] and othermoves[-1]:
       return True
      else:
        return True
    if currentRound / 2.5 >= num_of_betray:
      if othermoves[-2] and othermoves[-1]:
       return True
      else:
        return False
    else:
      return True

def DavisDietzenNONOISEuf75tt3p(mymoves, othermoves, currentRound):
    if currentRound < 3:
      if currentRound < 2:
       return False
      else:
       if othermoves[-2] and othermoves[-1]:
        return True
       else:
        return False
    num_of_betray = 0
    for i in othermoves:
      if i:
        num_of_betray += 1
    if currentRound / 2.25 <= num_of_betray:
      if othermoves[-3] and othermoves[-2] and othermoves[-1]:
       return True
      if othermoves[-2] and othermoves[-1]:
       return True
      if othermoves[-3] and othermoves[-1]:
       return True
      else:
        return False
    if currentRound / 2.25 >= num_of_betray:
      if othermoves[-3] and othermoves[-2] and othermoves[-1]:
       return True
      if othermoves[-2] and othermoves[-1]:
       return True
      if othermoves[-3] and othermoves[-1]:
       return False
      else:
       return False
    else:
      return True

def DavisDietzenNONOISEuf50tt3p(mymoves, othermoves, currentRound):
    if currentRound < 3:
      if currentRound < 2:
       return False
      else:
       if othermoves[-2] and othermoves[-1]:
        return True
       else:
        return False
    num_of_betray = 0
    for i in othermoves:
      if i:
        num_of_betray += 1
    if currentRound / 2 <= num_of_betray:
      if othermoves[-3] and othermoves[-2] and othermoves[-1]:
       return True
      if othermoves[-2] and othermoves[-1]:
       return True
      if othermoves[-3] and othermoves[-1]:
       return True
      else:
        return False
    if currentRound / 2 >= num_of_betray:
      if othermoves[-3] and othermoves[-2] and othermoves[-1]:
       return True
      if othermoves[-2] and othermoves[-1]:
       return True
      if othermoves[-3] and othermoves[-1]:
       return False
      else:
       return False
    else:
      return True