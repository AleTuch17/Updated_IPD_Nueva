def JacksonVamosGrudger(mymoves, othermoves, currentRound):
    #Literally Grudger from ncase.me
    if True in othermoves:
        return True
    return False

def JacksonVamosLogician1(mymoves, othermoves, currentRound):
	# Trusts you more or less depending on what you do. Trust level must meet a threshold to work.
	P = 1 # how slowly we forgive
	Q = 0 # how slowly we anger
	C = 1 # how nice we are at the start
	trust = C # probability that I cooperate
	for move in othermoves:
		if move: #cheating
			trust = Q*trust
		else:
			trust = P*trust + 1-P
	return trust < 0.5

def JacksonVamosLogician2(mymoves, othermoves, currentRound):
	# Trusts you more or less depending on what you do. Trust level must meet a threshold to work.
	P = .8 # how slowly we forgive
	Q = .8 # how slowly we anger
	C = 1 # how nice we are at the start
	trust = C # probability that I cooperate
	for move in othermoves:
		if move: #cheating
			trust = Q*trust
		else:
			trust = P*trust + 1-P
	return trust < 0.5

def JacksonVamosLogician3(mymoves, othermoves, currentRound):
	# Trusts you more or less depending on what you do. Trust level must meet a threshold to work.
	P = .9 # how slowly we forgive
	Q = .1 # how slowly we anger
	C = 1 # how nice we are at the start
	trust = C # probability that I cooperate
	for move in othermoves:
		if move: #cheating
			trust = Q*trust
		else:
			trust = P*trust + 1-P
	return trust < 0.5

def JacksonVamosLogician4(mymoves, othermoves, currentRound):
	# Trusts you more or less depending on what you do. Trust level must meet a threshold to work.
	P = 0 # how slowly we forgive
	Q = 0 # how slowly we anger
	C = 1 # how nice we are at the start
	trust = C # probability that I cooperate
	for move in othermoves:
		if move: #cheating
			trust = Q*trust
		else:
			trust = P*trust + 1-P
	return trust < 0.5

def JacksonVamosLogician5(mymoves, othermoves, currentRound):
	# Trusts you more or less depending on what you do. Trust level must meet a threshold to work.
	P = 0 # how slowly we forgive
	Q = .8 # how slowly we anger
	C = 0 # how nice we are at the start
	trust = C # probability that I cooperate
	for move in othermoves:
		if move: #cheating
			trust = Q*trust
		else:
			trust = P*trust + 1-P
	return trust < 0.5

def JacksonVamosLogician6(mymoves, othermoves, currentRound):
	# Trusts you more or less depending on what you do. Trust level must meet a threshold to work.
	P = .7 # how slowly we forgive
	Q = .2 # how slowly we anger
	C = 0.5 # how nice we are at the start
	trust = C # probability that I cooperate
	for move in othermoves:
		if move: #cheating
			trust = Q*trust
		else:
			trust = P*trust + 1-P
	return trust < 0.5

def JacksonVamosLogician7(mymoves, othermoves, currentRound):
	# Trusts you more or less depending on what you do. Trust level must meet a threshold to work.
	P = .95 # how slowly we forgive
	Q = .75 # how slowly we anger
	C = .5 # how nice we are at the start
	trust = C # probability that I cooperate
	for move in othermoves:
		if move: #cheating
			trust = Q*trust
		else:
			trust = P*trust + 1-P
	return trust < 0.5

def JacksonVamosLogician8(mymoves, othermoves, currentRound):
	# Trusts you more or less depending on what you do. Trust level must meet a threshold to work.
	P = 1 # how slowly we forgive
	Q = 1 # how slowly we anger
	C = 1 # how nice we are at the start
	trust = C # probability that I cooperate
	for move in othermoves:
		if move: #cheating
			trust = Q*trust
		else:
			trust = P*trust + 1-P
	return trust < 0.5

def JacksonVamosLogician9(mymoves, othermoves, currentRound):
	# Trusts you more or less depending on what you do. Trust level must meet a threshold to work.
	P = 0.75 # how slowly we forgive
	Q = 0.4 # how slowly we anger
	C = 0.5 # how nice we are at the start
	trust = C # probability that I cooperate
	for move in othermoves:
		if move: #cheating
			trust = Q*trust
		else:
			trust = P*trust + 1-P
	return trust < 0.5