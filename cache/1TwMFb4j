def naomieChienAlternateTTFTChecker(mymoves, othermoves, currentRound):
  # Alternates for 20 rounds, if opponent always cooperates, then relentlessly defect. Otherwise tit for two tat
  if currentRound <= 20:
    if len(mymoves) > 1:
      if mymoves[-1] == False:
        return True
      return False
    return False
  if currentRound >= 20:
    if othermoves[20:-1]:
      if mymoves[-1] == False:
          return True
      return False
    else:
      if othermoves[-1] and othermoves[-2]:
        return True
      return False
def naomieChienTitforTwoTat(mymoves, othermoves, currentRound):
  # Tit for two tat
  if len(othermoves) < 2:
    return False
  if othermoves[-1] and othermoves[-2]:
    return True
  else:
    return False
def naomieChienDefectRateChecker(mymoves, othermoves, currentRound):
  # Defect if opponent's defections greater than 10% of moves and last move was a defect
  betrays = 0
  for i in othermoves:
    if i:
      betrays += 1
  if betrays != 0:
    if betrays/len(othermoves) >= 0.1 and othermoves[-1] == True:
      return True
    return False
  return False
def naomieChienTitforTatDeadlockChecker(mymoves, othermoves, currentRound): 
  # Tit for two tat first 5 rounds, then just tit for tat while checking if there has been a deadlock. If so, will break deadlock by cooperating
  if len(othermoves) < 5 and len(othermoves)>2:
    if othermoves[-1] and othermoves[-2]:
      return True
    return False
  if len(othermoves)>5:
    if othermoves[-1]:
      if [True, False, True, False] in mymoves:
        return False
      return True
  return False 
  
  
  
