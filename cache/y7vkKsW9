def RowanBrownTf2TTiredNukePercentChange(mymoves, othermoves, currentRound):
  if len(othermoves) < 2:
      return False
  if len(othermoves)> 10 and len(othermoves)< 40 and othermoves.count(True)/len(othermoves)>=0.4:
    return True
  if len(othermoves)>= 40 and othermoves.count(True)/len(othermoves)>=0.25:
    return True
  else:
    if othermoves [-1] and othermoves [-2]:
      return True
    else:
      return False

def RowanBrownAlternator1(mymoves, othermoves, currentRound):
  if currentRound == 0:
    return False
  if mymoves[-1]:
    return False
  if not mymoves[-1]:
    return True

def RowanBrownAlternator2(mymoves, othermoves, currentRound):
  if currentRound == 0:
    return False
  if mymoves[-1]:
    return False
  if not mymoves[-1]:
    return True

def RowanBrownAlternator3(mymoves, othermoves, currentRound):
  if currentRound == 0:
    return False
  if mymoves[-1]:
    return False
  if not mymoves[-1]:
    return True

def RowanBrownAlternator4(mymoves, othermoves, currentRound):
  if currentRound == 0:
    return False
  if mymoves[-1]:
    return False
  if not mymoves[-1]:
    return True

def RowanBrownAlternator5(mymoves, othermoves, currentRound):
  if currentRound == 0:
    return False
  if mymoves[-1]:
    return False
  if not mymoves[-1]:
    return True

def RowanBrownAlternator6(mymoves, othermoves, currentRound):
  if currentRound == 0:
    return False
  if mymoves[-1]:
    return False
  if not mymoves[-1]:
    return True

def RowanBrownAlternator7(mymoves, othermoves, currentRound):
  if currentRound == 0:
    return False
  if mymoves[-1]:
    return False
  if not mymoves[-1]:
    return True

def RowanBrownAlternator8(mymoves, othermoves, currentRound):
  if currentRound == 0:
    return False
  if mymoves[-1]:
    return False
  if not mymoves[-1]:
    return True

def RowanBrownAlternator9(mymoves, othermoves, currentRound):
  if currentRound == 0:
    return False
  if mymoves[-1]:
    return False
  if not mymoves[-1]:
    return True