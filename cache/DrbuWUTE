def MaxEmanuelAlternatorDetectiveUpdated(mymoves, othermoves, currentRound):
  mydance = [False, True, False, False, True, True, True, False, True]
  otherdance1 = [True, False, True, True, False, False]
  otherdance2 = [False, True, False, True, True, True, False, False, False]
  score = 0
  if len(othermoves) < len(mydance):
    return mydance[len(othermoves)]
  selfscore = 0
  if len(othermoves) > len(mydance):
    for i in range(len(mydance)):
      if mydance[i] == othermoves[i]:
        selfscore += 1
  if selfscore >= 7:
    #print("self found")
    return False
  if len(othermoves) > len(otherdance1):
    for i in range(len(otherdance1)):
      if othermoves[i] == otherdance1[i]:
        score += 1
  if score >= 5:
    #print('found dance 1')
    return True
  score2 = 0
  if len(othermoves) > len(otherdance2):
    for i in range(len(otherdance2)):
      if othermoves[i] == otherdance2[i]:
        score2 += 1
  if score2 >= 7:
    #print('found dance 2')
    return True
  if len(othermoves) < 7 + len(mydance):
    #print('too short, cooperating to earn trust')
    return False
  # if othermoves[len(mydance):].count(True) > 0.45*len(othermoves[len(mydance):]) and len(othermoves) > len(mydance) + 7:
  #   print('1.75 :)')
  #   return True
  # if othermoves[-10:].count(True) > 6 and len(othermoves) > 7 + len(mydance):
  #   print('2 :)')
  #   return True
  # if False not in othermoves[-4:] and ((random.random() > 0.2 and mymoves[-1]) or (random.random() > 0.3 and not mymoves[-1])):
  #   print('3.25 :)')
  #   return True
  if othermoves[-4:].count(False) <= 1:
    return True
  # if any(othermoves[i+1] and not othermoves[i+2] and othermoves[i+3] and not othermoves[i+4] and (mymoves[i] or not mymoves[i+1] or mymoves[i+2] or not mymoves[i+3]) for i in range(len(othermoves)-4)):
  #   print('alternator found')
  #   return True
  othermovesbut = othermoves[len(mydance):]
  mymovesbut = mymoves[len(mydance):]
  if any(othermovesbut[i+1] and not othermovesbut[i+2] and othermovesbut[i+3] and not othermovesbut[i+4] and (mymovesbut[i] or not mymovesbut[i+1] or mymovesbut[i+2] or not mymovesbut[i+3]) for i in range(len(othermovesbut)-4)):
    #print('alternator found (after dance)')
    return True
  tftcounter = 0
  antitftcounter = 0
  for i in range(len(mymoves)-1):
    if mymoves[i] and othermoves[i+1]:
      tftcounter += 1
    elif mymoves[i] and not othermoves[i+1]:
      antitftcounter += 1
  #print(tftcounter, antitftcounter)
  if tftcounter > antitftcounter * 1.5 and len(othermoves) > 10:
    if othermoves[-1] and othermoves[-2]:
      #print('tft strat found - cheating (tf2t)', tftcounter, antitftcounter)
      return True
    #print('tft strat found - cooperating (tf2t)', tftcounter, antitftcounter)
    return False
  #print('tf2t found - alternating')
  return len(othermoves) % 2 == 0

def MaxEmanuelNoiseFeeder1(mymoves, othermoves, currentRound):
  #otherdance = [True, False, True, True, True, False, True]
  otherdance = [False, True, False, False, True, True, True, False, True]
  #mydance = [False, True, False, False, False, True, False]
  mydance = [False, True, False, True, True, True, False, False, False]
  score = 0
  if len(othermoves) > len(otherdance):
    for i in range(len(otherdance)):
      if othermoves[i] == otherdance[i]:
        score += 1
      else:
        #score += -1
        score += 0
  if len(othermoves) < len(mydance):
    return mydance[len(othermoves)]
  if score >= 6:
    return False
  return True

def MaxEmanuelNoiseFeeder2(mymoves, othermoves, currentRound):
  #otherdance = [True, False, True, True, True, False, True]
  otherdance = [False, True, False, False, True, True, True, False, True]
  #mydance = [False, True, False, False, False, True, False]
  mydance = [False, True, False, True, True, True, False, False, False]
  score = 0
  if len(othermoves) > len(otherdance):
    for i in range(len(otherdance)):
      if othermoves[i] == otherdance[i]:
        score += 1
      else:
        #score += -1
        score += 0
  if len(othermoves) < len(mydance):
    return mydance[len(othermoves)]
  if score >= 6:
    return False
  return True

def MaxEmanuelNoiseFeeder3(mymoves, othermoves, currentRound):
  #otherdance = [True, False, True, True, True, False, True]
  otherdance = [False, True, False, False, True, True, True, False, True]
  #mydance = [False, True, False, False, False, True, False]
  mydance = [False, True, False, True, True, True, False, False, False]
  score = 0
  if len(othermoves) > len(otherdance):
    for i in range(len(otherdance)):
      if othermoves[i] == otherdance[i]:
        score += 1
      else:
        #score += -1
        score += 0
  if len(othermoves) < len(mydance):
    return mydance[len(othermoves)]
  if score >= 6:
    return False
  return True

def MaxEmanuelNoiseFeeder4(mymoves, othermoves, currentRound):
  #otherdance = [True, False, True, True, True, False, True]
  otherdance = [False, True, False, False, True, True, True, False, True]
  #mydance = [False, True, False, False, False, True, False]
  mydance = [False, True, False, True, True, True, False, False, False]
  score = 0
  if len(othermoves) > len(otherdance):
    for i in range(len(otherdance)):
      if othermoves[i] == otherdance[i]:
        score += 1
      else:
        #score += -1
        score += 0
  if len(othermoves) < len(mydance):
    return mydance[len(othermoves)]
  if score >= 6:
    return False
  return True

def MaxEmanuelNoiseFeeder5(mymoves, othermoves, currentRound):
  #otherdance = [True, False, True, True, True, False, True]
  otherdance = [False, True, False, False, True, True, True, False, True]
  #mydance = [False, True, False, False, False, True, False]
  mydance = [False, True, False, True, True, True, False, False, False]
  score = 0
  if len(othermoves) > len(otherdance):
    for i in range(len(otherdance)):
      if othermoves[i] == otherdance[i]:
        score += 1
      else:
        #score += -1
        score += 0
  if len(othermoves) < len(mydance):
    return mydance[len(othermoves)]
  if score >= 6:
    return False
  return True

def MaxEmanuelNoiseFeeder6(mymoves, othermoves, currentRound):
  #otherdance = [True, False, True, True, True, False, True]
  otherdance = [False, True, False, False, True, True, True, False, True]
  #mydance = [False, True, False, False, False, True, False]
  mydance = [False, True, False, True, True, True, False, False, False]
  score = 0
  if len(othermoves) > len(otherdance):
    for i in range(len(otherdance)):
      if othermoves[i] == otherdance[i]:
        score += 1
      else:
        #score += -1
        score += 0
  if len(othermoves) < len(mydance):
    return mydance[len(othermoves)]
  if score >= 6:
    return False
  return True

def MaxEmanuelNoiseFeeder7(mymoves, othermoves, currentRound):
  #otherdance = [True, False, True, True, True, False, True]
  otherdance = [False, True, False, False, True, True, True, False, True]
  #mydance = [False, True, False, False, False, True, False]
  mydance = [False, True, False, True, True, True, False, False, False]
  score = 0
  if len(othermoves) > len(otherdance):
    for i in range(len(otherdance)):
      if othermoves[i] == otherdance[i]:
        score += 1
      else:
        #score += -1
        score += 0
  if len(othermoves) < len(mydance):
    return mydance[len(othermoves)]
  if score >= 6:
    return False
  return True

def MaxEmanuelNoiseFeeder8(mymoves, othermoves, currentRound):
  #otherdance = [True, False, True, True, True, False, True]
  otherdance = [False, True, False, False, True, True, True, False, True]
  #mydance = [False, True, False, False, False, True, False]
  mydance = [False, True, False, True, True, True, False, False, False]
  score = 0
  if len(othermoves) > len(otherdance):
    for i in range(len(otherdance)):
      if othermoves[i] == otherdance[i]:
        score += 1
      else:
        #score += -1
        score += 0
  if len(othermoves) < len(mydance):
    return mydance[len(othermoves)]
  if score >= 6:
    return False
  return True

def MaxEmanuelNoiseFeeder9(mymoves, othermoves, currentRound):
  #otherdance = [True, False, True, True, True, False, True]
  otherdance = [False, True, False, False, True, True, True, False, True]
  #mydance = [False, True, False, False, False, True, False]
  mydance = [False, True, False, True, True, True, False, False, False]
  score = 0
  if len(othermoves) > len(otherdance):
    for i in range(len(otherdance)):
      if othermoves[i] == otherdance[i]:
        score += 1
      else:
        #score += -1
        score += 0
  if len(othermoves) < len(mydance):
    return mydance[len(othermoves)]
  if score >= 6:
    return False
  return True