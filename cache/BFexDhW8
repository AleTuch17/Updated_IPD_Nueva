def KerrieZhuTitForTatForAlternator(mymoves, othermoves, currentRound):
  #(For no noise)Stays silent until other player rats and then will rat. Will recognize alternator pattern and respond by nuking.
    if currentRound > 5 and othermoves[-1] and not othermoves[-2] and othermoves[-3] and not othermoves[-4]:
      return True
    if currentRound > 5 and not othermoves[-1] and othermoves[-2] and not othermoves[-3] and othermoves[-4]:
      return True
    if len(othermoves) == 0:
      return False
    if othermoves[-1]:
      return True
    else:
      return False

def KerrieZhuthreeNuke(mymoves, othermoves, currentRound): #tired of the other player after being betrayed x number of times
  if othermoves.count(True)>=3: #if there are three or more betrays in the other player's moves (not dependent where in the list)
    return True
  return False

def KerrieZhunukeFortat(mymoves, othermoves, currentRound):
    #Stays silent until the other player rats. If the other player's rats this player rats forever.
    if len(othermoves) == 0:
        return False
    if True in othermoves:
        return True
    return False

def KerrieZhuRandom(mymoves, othermoves, currentRound):
    #Chooses kinda randomly. Change the variable below to tell it how often to rat. For example, if randomness is set to 0.9, this player will rat 90% of the time
    randomness = 0.9
    randNumber = random.random()
    if randNumber < randomness:
        return True
    return False