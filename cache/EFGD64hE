#NOISE - has to be more forgiving with looser identity? -- longer identity

def AlexisTuchindaNGrudgerLeader(mymoves, othermoves, currentRound): #currentRound starts counting at 0
  id = [False, True, False, False, False, True, False, False]

  def forgivingCheck():
    mismatch = 0
    for i in range(len(id)):
      if othermoves[i]!=id[i]:
        mismatch+=1
    if mismatch > int(len(id)/3):
      return False #do not trust
    return True

  #how to exploit to farm more - sneaky sneaky

  if True not in othermoves:
    if currentRound < len(id):
      return id[currentRound]
    return True #instigating - to exploit followers & advantage of coops

  if othermoves.count(True)>1 or (currentRound >= len(id) and not forgivingCheck()):
    return True
  return False


def AlexisTuchindaNForgivingGrudgerLeader(mymoves, othermoves, currentRound): #grudger beats Pavolv, but also how does RAT outdo it?
  id = [False, True, False, False, False, True, False, False]

  def forgivingCheck():
    mismatch = 0
    for i in range(len(id)):
      if othermoves[i]!=id[i]:
        mismatch+=1
    if mismatch > int(len(id)/3):
      return False #do not trust
    return True

  if True not in othermoves:
    if currentRound < len(id):
      return id[currentRound]
    return True #instigating - to exploit followers & advantage of coops

  if othermoves.count(True) >1 or (currentRound >= len(id) and not forgivingCheck()):
    if len(othermoves)<1:
      return False
    for i in range(currentRound-1):
      if othermoves[i] and othermoves[i+1]:
        return True
    return False

  if currentRound >= len(id) and forgivingCheck():
    return True
  return False

def AlexisTuchindaNKittenFollower(mymoves, othermoves, currentRound):
  id = [False, True, False, False, False, True, False, False]

  def forgivingCheck():
    mismatch = 0
    for i in range(len(id)):
      if othermoves[i]!=id[i]:
        mismatch+=1
    if mismatch > int(len(id)/3):
      return False #do not trust
    return True

  def statusCheck(key):
    if othermoves.count(key)>=int((currentRound-len(id))/4):
      return False #do not trust
    return True

  if currentRound < 2:
    return False
  if othermoves[-2] and othermoves[-1]:
    if currentRound < len(id):
      return True
    if forgivingCheck() and statusCheck(False):
      return False
    return True
  return False

def AlexisTuchindaNGrudgerFollower(mymoves, othermoves, currentRound):
  id = [False, True, False, False, False, True, False, False]

  def forgivingCheck():
    mismatch = 0
    for i in range(len(id)):
      if othermoves[i]!=id[i]:
        mismatch+=1
    if mismatch > int(len(id)/3):
      return False #do not trust
    return True

  def statusCheck(key):
    if othermoves.count(key)>=int((currentRound-len(id))/4):
      return False #do not trust
    return True

  if currentRound < len(id):
    if othermoves.count(True)>1:
      return True
    return False
  if not forgivingCheck() or not statusCheck(False):
    return True
  return False

def AlexisTuchindaNShortTemperFollower(mymoves, othermoves, current):
  id = [False, True, False, False, False, True, False, False]

  def forgivingCheck():
    mismatch = 0
    for i in range(len(id)):
      if othermoves[i]!=id[i]:
        mismatch+=1
    if mismatch > int(len(id)/3):
      return False #do not trust
    return True

  if len(mymoves)<len(id):
    if len(othermoves) > 1 and othermoves[-1]:
      return True
    return False

  if forgivingCheck():
    if False in othermoves[len(id):]:
      #trust - it followed detective pattern - forgiving algorithm --> take advantage of 1 stabs, alternator

      if othermoves[len(id):].count(True)>=10:
        return True
      return not mymoves[-1]

    return False

  if othermoves[len(id):].count(True)>=10:
    return True

  if othermoves[-1] or othermoves[-2]:
    return True

  return False


def AlexisTuchindaNAlternateDetectiveLeader(mymoves, othermoves, currentRound): #currentRound starts counting at 0
  id = [False, True, False, False, False, True, False, False]

  def forgivingCheck():
    mismatch = 0
    for i in range(len(id)):
      if othermoves[i]!=id[i]:
        mismatch+=1
    if mismatch > int(len(id)/3):
      return False #do not trust
    return True

  if len(mymoves)<len(id):
    return id[currentRound]

  if True not in othermoves[:len(id)]: #first level of trust - might be a follower or another algorithm

    if True in othermoves[len(id):]:
      if othermoves[-2] and othermoves[-1]:
        return True

      return not mymoves[-1]

    return True

  if othermoves.count(True) >  1 or (currentRound >= len(id) and not forgivingCheck()):

    #be forgiving
    if othermoves[-2] and othermoves[-1]:
      return True

    #alternator
    return not mymoves[-1]

  if currentRound >= len(id) and forgivingCheck():
    return True
  return False
