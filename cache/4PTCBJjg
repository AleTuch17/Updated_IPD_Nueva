def AryanMehraPavlovNuke(mymoves, othermoves, currentRound):
  pattern = [False, False, False, False, False, True, False]
  my_pattern = [False, False, False, True, False, True, False]

  if currentRound < 7:
    return my_pattern[currentRound]
  else:
    if (othermoves[:7] == pattern) or (othermoves[:7] == my_pattern):
      return True
    else:
      # Go into pavlov adjusted strategy

      num_defections = othermoves.count(True)

      if num_defections > 4:
        return True
      else:
        if othermoves[-1] == False:
          return mymoves[-1]
        if othermoves[-1] == True:
          return not mymoves[-1]


def AryanMehraHandshakeFeeder1(mymoves, othermoves, currentRound):
  pattern = [False, False, False, False, False, True, False]
  my_pattern = [False, False, False, True, False, True, False]

  if currentRound < 7:
    return my_pattern[currentRound]
  else:
    if (othermoves[:7] == pattern) or (othermoves[:7] == my_pattern):
      return False
    else:
      return True

def AryanMehraHandshakeFeeder2(mymoves, othermoves, currentRound):
  pattern = [False, False, False, False, False, True, False]
  my_pattern = [False, False, False, True, False, True, False]

  if currentRound < 7:
    return my_pattern[currentRound]
  else:
    if (othermoves[:7] == pattern) or (othermoves[:7] == my_pattern):
      return False
    else:
      return True


def AryanMehraHandshakeFeeder3(mymoves, othermoves, currentRound):
  pattern = [False, False, False, False, False, True, False]
  my_pattern = [False, False, False, True, False, True, False]

  if currentRound < 7:
    return my_pattern[currentRound]
  else:
    if (othermoves[:7] == pattern) or (othermoves[:7] == my_pattern):
      return False
    else:
      return True


def AryanMehraHandshakeFeeder4(mymoves, othermoves, currentRound):
  pattern = [False, False, False, False, False, True, False]
  my_pattern = [False, False, False, True, False, True, False]

  if currentRound < 7:
    return my_pattern[currentRound]
  else:
    if (othermoves[:7] == pattern) or (othermoves[:7] == my_pattern):
      return False
    else:
      return True


def AryanMehraHandshakeFeeder5(mymoves, othermoves, currentRound):
  pattern = [False, False, False, False, False, True, False]
  my_pattern = [False, False, False, True, False, True, False]

  if currentRound < 7:
    return my_pattern[currentRound]
  else:
    if (othermoves[:7] == pattern) or (othermoves[:7] == my_pattern):
      return False
    else:
      return True


def AryanMehraHandshakeFeeder6(mymoves, othermoves, currentRound):
  pattern = [False, False, False, False, False, True, False]
  my_pattern = [False, False, False, True, False, True, False]

  if currentRound < 7:
    return my_pattern[currentRound]
  else:
    if (othermoves[:7] == pattern) or (othermoves[:7] == my_pattern):
      return False
    else:
      return True


def AryanMehraHandshakeFeeder7(mymoves, othermoves, currentRound):
  pattern = [False, False, False, False, False, True, False]
  my_pattern = [False, False, False, True, False, True, False]

  if currentRound < 7:
    return my_pattern[currentRound]
  else:
    if (othermoves[:7] == pattern) or (othermoves[:7] == my_pattern):
      return False
    else:
      return True


def AryanMehraHandshakeFeeder8(mymoves, othermoves, currentRound):
  pattern = [False, False, False, False, False, True, False]
  my_pattern = [False, False, False, True, False, True, False]

  if currentRound < 7:
    return my_pattern[currentRound]
  else:
    if (othermoves[:7] == pattern) or (othermoves[:7] == my_pattern):
      return False
    else:
      return True

def AryanMehraHandshakeFeeder9(mymoves, othermoves, currentRound):
  pattern = [False, False, False, False, False, True, False]
  my_pattern = [False, False, False, True, False, True, False]

  if currentRound < 7:
    return my_pattern[currentRound]
  else:
    if (othermoves[:7] == pattern) or (othermoves[:7] == my_pattern):
      return False
    else:
      return True