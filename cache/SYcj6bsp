def ViviLevenbergMASTERNN(mymoves, othermoves, currentRound):
    #Plays a handshake for the first five rounds, then if it finds a feeder, it always betrays, but if it is playing against an external algorithm it plays tit for tat
    if currentRound == 0:
      return False
    if currentRound == 1:
      return False
    if currentRound == 2:
      return False
    if currentRound == 3:
      return False
    if currentRound == 4:
      return True
    if not othermoves[0] and not othermoves[1] and othermoves[2] and not othermoves[3] and othermoves[4]:
      return True      
    else:
      if othermoves[-1]:
          return True
      if len(othermoves) > 4:
          return False
def ViviLevenbergMASTERNN2(mymoves, othermoves, currentRound):
    #Plays a handshake for the first five rounds, then if it finds a feeder, it always betrays, but if it is playing against an external algorithm it plays Pavlov
    if currentRound == 0:
      return False
    if currentRound == 1:
      return False
    if currentRound == 2:
      return False
    if currentRound == 3:
      return False
    if currentRound == 4:
      return True
    if not othermoves[0] and not othermoves[1] and othermoves[2] and not othermoves[3] and othermoves[4]:
      return True      
    else:
      if len(othermoves) >4:
        return False
      if othermoves[-1] and not mymoves [-1]: #If I cooperate and get cheated, I want to change to cheating the next round
        return True
      if not othermoves[-1] and mymoves [-1]: #If I cheat and they cooperate, I want to cheat again the next round
        return True
      if othermoves[-1] and mymoves[-1]: #If we both cooperate, I want to cooperate again
        return False
      if not othermoves[-1] and not mymoves [-1]: #If they cheat and I cheat, I want to cooperate in the next round to restore equilibrium
        return False
def ViviLevenbergFEEDERNN1(mymoves, othermoves, currentRound):
#Plays a handshake for the first five rounds, then if it finds a master, it always cooperates, but if it is playing against an external algorithm it always betrays to make sure that no other strategies can capitalize off of it
    if currentRound == 0:
      return False
    if currentRound == 1:
      return False
    if currentRound == 2:
      return True
    if currentRound == 3:
      return False
    if currentRound == 4:
      return True
    if not othermoves[0] and not othermoves[1] and not othermoves[2] and not othermoves[3] and othermoves[4]:
        return False
    return True
def ViviLevenbergFEEDERNN2(mymoves, othermoves, currentRound):
#Plays a handshake for the first five rounds, then if it finds a master, it always cooperates, but if it is playing against an external algorithm it always betrays to make sure that no other strategies can capitalize off of it
    if currentRound == 0:
      return False
    if currentRound == 1:
      return False
    if currentRound == 2:
      return True
    if currentRound == 3:
      return False
    if currentRound == 4:
      return True
    if not othermoves[0] and not othermoves[1] and not othermoves[2] and not othermoves[3] and othermoves[4]:
        return False
    return True
def ViviLevenbergFEEDERNN3(mymoves, othermoves, currentRound):
#Plays a handshake for the first five rounds, then if it finds a master, it always cooperates, but if it is playing against an external algorithm it always betrays to make sure that no other strategies can capitalize off of it
    if currentRound == 0:
      return False
    if currentRound == 1:
      return False
    if currentRound == 2:
      return True
    if currentRound == 3:
      return False
    if currentRound == 4:
      return True
    if not othermoves[0] and not othermoves[1] and not othermoves[2] and not othermoves[3] and othermoves[4]:
        return False
    return True
def ViviLevenbergFEEDERNN4(mymoves, othermoves, currentRound):
#Plays a handshake for the first five rounds, then if it finds a master, it always cooperates, but if it is playing against an external algorithm it always betrays to make sure that no other strategies can capitalize off of it
    if currentRound == 0:
      return False
    if currentRound == 1:
      return False
    if currentRound == 2:
      return True
    if currentRound == 3:
      return False
    if currentRound == 4:
      return True
    if not othermoves[0] and not othermoves[1] and not othermoves[2] and not othermoves[3] and othermoves[4]:
        return False
    return True
def ViviLevenbergFEEDERNN5(mymoves, othermoves, currentRound):
#Plays a handshake for the first five rounds, then if it finds a master, it always cooperates, but if it is playing against an external algorithm it always betrays to make sure that no other strategies can capitalize off of it
    if currentRound == 0:
      return False
    if currentRound == 1:
      return False
    if currentRound == 2:
      return True
    if currentRound == 3:
      return False
    if currentRound == 4:
      return True
    if not othermoves[0] and not othermoves[1] and not othermoves[2] and not othermoves[3] and othermoves[4]:
        return False
    return True
def ViviLevenbergFEEDERNN6(mymoves, othermoves, currentRound):
#Plays a handshake for the first five rounds, then if it finds a master, it always cooperates, but if it is playing against an external algorithm it always betrays to make sure that no other strategies can capitalize off of it
    if currentRound == 0:
      return False
    if currentRound == 1:
      return False
    if currentRound == 2:
      return True
    if currentRound == 3:
      return False
    if currentRound == 4:
      return True
    if not othermoves[0] and not othermoves[1] and not othermoves[2] and not othermoves[3] and othermoves[4]:
        return False
    return True
def ViviLevenbergFEEDERNN7(mymoves, othermoves, currentRound):
#Plays a handshake for the first five rounds, then if it finds a master, it always cooperates, but if it is playing against an external algorithm it always betrays to make sure that no other strategies can capitalize off of it
    if currentRound == 0:
      return False
    if currentRound == 1:
      return False
    if currentRound == 2:
      return True
    if currentRound == 3:
      return False
    if currentRound == 4:
      return True
    if not othermoves[0] and not othermoves[1] and not othermoves[2] and not othermoves[3] and othermoves[4]:
        return False
    return True
def ViviLevenbergFEEDERNN8(mymoves, othermoves, currentRound):
#Plays a handshake for the first five rounds, then if it finds a master, it always cooperates, but if it is playing against an external algorithm it always betrays to make sure that no other strategies can capitalize off of it
    if currentRound == 0:
      return False
    if currentRound == 1:
      return False
    if currentRound == 2:
      return True
    if currentRound == 3:
      return False
    if currentRound == 4:
      return True
    if not othermoves[0] and not othermoves[1] and not othermoves[2] and not othermoves[3] and othermoves[4]:
        return False
    return True