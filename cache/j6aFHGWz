def RachelYunOriginal(mymoves, othermoves, currentRound):

  # original strategy incorporating soft majority algorithm. Strategy:
        # First round: Cooperate
        # Second round: cooperate
        # Third round: defect
        # If they have defected two or three times at that point, you switch to soft majority strategy
        # If they have defected 0 or 1 times in the first 3 rounds:
            # your 4th move is cooperate
        # If they cooperate in round 4 after you defect:
            # you should defect in round 5 and then alternate until they defect twice in a row
                # When they defect twice in a row, switch to soft majority
                
  #In-line comments for more detail.

  def RachelYunSoftMajority(mymoves, othermoves, currentRound):
    if currentRound <= 1:
        return False

    endRound = currentRound
    startRound = endRound-2
    while startRound >= 0:
      numOpponentDefects = sum([1 for x in othermoves[startRound:endRound] if x==True])
      numRounds = endRound - startRound
      if 2*numOpponentDefects > numRounds:
        return True
      startRound = startRound - 2
    return False

  # first 2 rounds
  if currentRound<=1:
    return False
  # round 3
  elif currentRound==2:
    return True
  # round 4
  elif currentRound==3:
    # if other defected >1 times in the first 3 rounds, switch to soft majority
    if sum([1 for x in othermoves[:3] if x==True]) > 1:
      return RachelYunSoftMajority(mymoves, othermoves, currentRound)
    else: # otherwise cooperate
      return False
  # round 5:
  elif currentRound==4:
    if othermoves[3]==False:  # if other cooperated in round 4, then defect
      return True
    else:
      return RachelYunSoftMajority(mymoves, othermoves, currentRound)
  # rounds 6+
  else:
    # if other defected twice in a row switch to soft majority
    if (othermoves[currentRound-1]==True and othermoves[currentRound-2]==True):
      return RachelYunSoftMajority(mymoves, othermoves, currentRound)
    else:
      if mymoves[currentRound-1]==True:
        return False
      else:
        return True

    
    
def RachelYunAdaptedTFTT(mymoves, othermoves, currentRound):

  # Function: TFTT, except it defects on the last and second-to-last rounds. 
  # Defects on round 199 to catch opponent off-guard and collect some extra payoff.
  
  if currentRound==199 or currentRound==200:
    return True
  if len(othermoves) < 2:
      return False
  if othermoves[-1] and othermoves[-2]:
      return True
  else:
      return False



def RachelYunSoftMajority(mymoves, othermoves, currentRound):

  # Every round, do the following:
     # Look at the previous two rounds. If the opponent defected in both rounds, you defect.
     # Look at the previous four rounds. If the opponent defected in 3 of the 4, you defect.
     # Look at the previous six rounds. If the opponent defected in 4 of the 6, you defect.
     # Look at the previous eight rounds. If the opponent defected in 5 of the 8, you defect.
  # etc. until you have reached back to the beginning of the game.
  # Makes it somewhat forgiving and takes into account the opponent's recent actions.
  
  if currentRound <= 1: #first and second round, cooperate
      return False

  endRound = currentRound
  startRound = endRound-2
  numIt = 0
  while startRound >= 0 and numIt < 2:
    numOpponentDefects = sum([1 for x in othermoves[startRound:endRound] if x==True])
    numRounds = endRound - startRound
    if 2*numOpponentDefects > numRounds:
      return True
    startRound = startRound - 2
    numIt +=1
  return False



def RachelYunTitForTwotats(mymoves, othermoves, currentRound):
    #Stays silent until the other player rats twice in a row. If the other player's last 2 moves is rat this player only rats for this round.
    if len(othermoves) < 2:
        return False
    if othermoves[-1] and othermoves[-2]:
        return True
    else:
        return False
    
    
    
def RachelYunAdaptedTFT(mymoves, othermoves, currentRound):

  #Function: TFT, except it defects on the last and second-to-last rounds. 
  #Defects on round 199 to catch opponent off-guard and collect some extra payoff.
  
  if currentRound==199 or currentRound==200:
    return True
  if len(othermoves) == 0:
    return False
  if othermoves[-1]:
    return True
  return False